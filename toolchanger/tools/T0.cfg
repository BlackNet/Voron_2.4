# if you want to use this file in your actual tool changer then remove the `example_` from the filename.


# This file contains common pin mappings for the BIGTREETECH EBBT0
# Canbus board. To use this config, the firmware should be compiled for the
# STM32G0B1 with "8 MHz crystal" and "USB (on PA11/PA12)" or "CAN bus (on PB0/PB1)".
# The "EBB Can" micro-controller will be used to control the components on the nozzle.

# See docs/Config_Reference.md for a description of parameters.

[mcu EBBCan_T0]
canbus_uuid: 48e1094c2d8a
# python3 ~/katapult/scripts/flashtool.py -i can0 -u ac5f7df1a805 -r
# python3 ~/katapult/scripts/flashtool.py -i can0 -u ac5f7df1a805 -f ~/klipper/out/klipper.bin


# [input_shaper]
# shaper_freq_x: 55.4 # center frequency for the X axis filter
# shaper_type_x: ... # filter type for the X axis
# shaper_freq_y: ... # center frequency for the Y axis filter
# shaper_type_y: ... # filter type for the Y axis
# damping_ratio_x: ... # damping ratio for the X axis
# damping_ratio_y: ... # damping ratio for the Y axis

[resonance_tester]
probe_points: 175, 175, 20
accel_chip: adxl345
accel_per_hz:100
sweeping_accel: 400
sweeping_period: 0

[adxl345]
cs_pin: EBBCan_T0: PB12
spi_software_sclk_pin: EBBCan_T0:PB10
spi_software_mosi_pin: EBBCan_T0:PB11
spi_software_miso_pin: EBBCan_T0:PB2
axes_map: x,z,y

[extruder]
step_pin: EBBCan_T0:PD0
dir_pin: !EBBCan_T0:PD1
enable_pin: !EBBCan_T0:PD2
heater_pin: EBBCan_T0:PB13
sensor_pin: EBBCan_T0:PA4
sensor_type: MAX31865
spi_bus: spi1
rtd_nominal_r: 100
rtd_reference_r: 430
rtd_num_of_wires: 2

full_steps_per_rotation: 200
microsteps: 32
rotation_distance: 5.6
nozzle_diameter: 0.400
filament_diameter: 1.750

control: pid

pid_Kp: 30   #44.282 
pid_Ki: 10   #18.451 
pid_Kd: 26.570

min_temp: 0
max_temp: 300

[tmc2209 extruder]
uart_pin: EBBCan_T0:PA15
run_current: 0.5
stealthchop_threshold: 0

[heater_fan T0_hotend_fan]
pin: EBBCan_T0:PA0
heater: extruder
heater_temp: 50.0

# [multi_pin T0_partfan]
# pins: EBBCan_T0:PA0, EBBCan_T0:PA1

[fan_generic T0_partfan]
pin: EBBCan_T0:PA1

[gcode_macro T0]
variable_active: 0
variable_color: ""
gcode:
    SELECT_TOOL T=0


[neopixel T0_hotend_RGB]
pin: EBBCan_T0:PD3

[temperature_sensor CPU_T0]
sensor_type: temperature_mcu
sensor_mcu: EBBCan_T0
min_temp: 0
max_temp: 100

#change the tool numbers to the tool you are configuring, ie T0, T1, etc
[tool T0]
#change this too
tool_number: 0
#if this were T1, then this would be extruder1, etc
extruder: extruder
#Change T0_partfan to tool number
fan: T0_partfan

#These are build specific, its where the tool is sititng in it's dock.
params_park_x: 349.000
params_park_y: 4.500
params_park_z: 292.058

#M114 
#X:349.000 Y:4.500 Z:292.058


# For InputShaper run per tool and enter the frequency here
params_input_shaper_type_x: 'mzv'
params_input_shaper_freq_x: 52
params_input_shaper_type_y: 'mzv'
params_input_shaper_freq_y: 37.2

params_accelerometer: 'adxl345 T0'

[tool_probe T0]
pin: EBBCan_T0:PB6
tool: 0
x_offset: 0 # X axis-sensor relative nozzle offset
y_offset: 0 # Y axis-sensor relative nozzle offset
# More positive = More Squish
z_offset = 0.658

speed: 5.0
samples: 3
samples_result: median
sample_retract_dist: 2.0
samples_tolerance: 0.02
samples_tolerance_retries: 3
activate_gcode:
    _TAP_PROBE_ACTIVATE HEATER=extruder
 ## Tap temp probing
 {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}